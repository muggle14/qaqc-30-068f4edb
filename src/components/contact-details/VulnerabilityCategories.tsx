
import { useState } from "react";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { ChevronDown } from "lucide-react";
import { Button } from "@/components/ui/button";

interface VulnerabilityCategoriesProps {
  selectedCategories: string[];
  otherCategory: string;
  onCategoriesChange: (categories: string[]) => void;
  onOtherCategoryChange: (value: string) => void;
}

export const VULNERABILITY_CATEGORIES = [
  "Financial",
  "Emotional",
  "Physical",
  "Mental",
  "Social",
  "Other"
] as const;

export const VulnerabilityCategories = ({
  selectedCategories,
  otherCategory,
  onCategoriesChange,
  onOtherCategoryChange,
}: VulnerabilityCategoriesProps) => {
  const [isOpen, setIsOpen] = useState(false);
  
  const handleCategoryChange = (category: string, checked: boolean) => {
    if (checked) {
      onCategoriesChange([...selectedCategories, category]);
    } else {
      onCategoriesChange(selectedCategories.filter(c => c !== category));
    }
  };

  const selectedCount = selectedCategories.length;

  return (
    <div className="space-y-2">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="sm" className="p-0 hover:bg-transparent">
                <ChevronDown className={`h-4 w-4 transition-transform duration-200 ${isOpen ? "" : "-rotate-90"}`} />
              </Button>
            </CollapsibleTrigger>
            <Label className="text-sm font-medium">
              Vulnerability Categories {selectedCount > 0 && `(${selectedCount} selected)`}
            </Label>
          </div>
        </div>

        <CollapsibleContent className="transition-all pt-4">
          <div className="grid grid-cols-2 gap-4">
            {VULNERABILITY_CATEGORIES.map((category) => (
              <div key={category} className="flex items-center space-x-2">
                <Checkbox
                  id={`category-${category}`}
                  checked={selectedCategories.includes(category)}
                  onCheckedChange={(checked) => 
                    handleCategoryChange(category, checked as boolean)
                  }
                />
                <Label 
                  htmlFor={`category-${category}`}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {category}
                </Label>
              </div>
            ))}
          </div>

          {selectedCategories.includes("Other") && (
            <div className="mt-4">
              <Label htmlFor="other-category" className="text-sm">
                Specify other vulnerability category:
              </Label>
              <Input
                id="other-category"
                value={otherCategory}
                onChange={(e) => onOtherCategoryChange(e.target.value)}
                maxLength={40}
                placeholder="Enter other vulnerability category..."
                className="max-w-md mt-1"
              />
            </div>
          )}
        </CollapsibleContent>
      </Collapsible>
    </div>
  );
};
